pipeline {
  agent any

  environment {
    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Terraform
    TERRAFORM_HOST = "104.43.89.67"       // IP ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ô Terraform
    TERRAFORM_USER = "sooya"               // SSH user
    TF_REPO        = "https://github.com/tadaj-mis/devops-noteapp.git"  // Git repo ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö .tf
    TF_DIR         = "/home/sooya/terraform_tada"  // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÉ‡∏ô VM

    // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: "apply" ‡∏´‡∏£‡∏∑‡∏≠ "destroy"
    TF_MODE        = "apply"  // üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "destroy" ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  }

  stages {

    stage('üì• Git Clone on Terraform VM') {
      steps {
        sshagent(credentials: ['ssh-terraform-agent']) {
          sh """
            ssh -o StrictHostKeyChecking=no ${TERRAFORM_USER}@${TERRAFORM_HOST} '
              if [ ! -d ${TF_DIR} ]; then
                git clone ${TF_REPO} ${TF_DIR};
              else
                cd ${TF_DIR} && git pull;
              fi
            '
          """
        }
      }
    }

    stage('üíª Terraform Apply or Destroy') {
      steps {
        withCredentials([
          string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
          string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
          string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
          string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID')
        ]) {
          sshagent(credentials: ['ssh-terraform-agent']) {
            sh """
              ssh -o StrictHostKeyChecking=no ${TERRAFORM_USER}@${TERRAFORM_HOST} '
                export ARM_CLIENT_ID="${ARM_CLIENT_ID}" &&
                export ARM_CLIENT_SECRET="${ARM_CLIENT_SECRET}" &&
                export ARM_SUBSCRIPTION_ID="${ARM_SUBSCRIPTION_ID}" &&
                export ARM_TENANT_ID="${ARM_TENANT_ID}" &&
                cd ${TF_DIR} &&
                terraform init &&
                terraform ${TF_MODE} -var-file=terraform.tfvars -auto-approve
              '
            """
          }
        }
      }
    }

    stage('üåê Get VM Public IP') {
      when {
        expression { return env.TF_MODE == 'apply' }
      }
      steps {
        sshagent(credentials: ['ssh-terraform-agent']) {
          script {
            def ip = sh(
              script: """
                ssh -o StrictHostKeyChecking=no ${TERRAFORM_USER}@${TERRAFORM_HOST} '
                  cd ${TF_DIR} &&
                  terraform output -raw vm_public_ip
                '
              """,
              returnStdout: true
            ).trim()
            echo "‚úÖ Public IP ‡∏à‡∏≤‡∏Å Terraform: ${ip}"
            writeFile file: 'vm_ip.txt', text: ip
            archiveArtifacts artifacts: 'vm_ip.txt', fingerprint: true
          }
        }
      }
    }
  }
}
